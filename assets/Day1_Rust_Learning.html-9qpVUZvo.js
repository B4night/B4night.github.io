import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as p,c as o,b as n,d as s,e as c,a as i}from"./app-yx1WRGhx.js";const l={},u=n("h1",{id:"install",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#install"},[n("span",null,"Install")])],-1),r={href:"https://doc.rust-lang.org/book/ch01-01-installation.html",target:"_blank",rel:"noopener noreferrer"},d=i(`<h1 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello World</span></a></h1><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then use command <code>rustc ./main.rs</code> to generate the executable <code>main</code></p><p>The <code>main</code> function is the entry of the program.</p><h1 id="the-in-println" tabindex="-1"><a class="header-anchor" href="#the-in-println"><span>The <code>!</code> in <code>println!</code></span></a></h1><p>tldr: Using a <code>!</code> means calling a macro instead of a normal function</p><h1 id="cargo" tabindex="-1"><a class="header-anchor" href="#cargo"><span>Cargo</span></a></h1><p>Cargo is Rustâ€™s build system and package manager.</p><h2 id="create-a-project-with-cargo" tabindex="-1"><a class="header-anchor" href="#create-a-project-with-cargo"><span>Create a project with Cargo</span></a></h2><p>Command <code>Cargo new project_name</code> will create a project directory.</p><h2 id="build-and-run-a-cargo-program" tabindex="-1"><a class="header-anchor" href="#build-and-run-a-cargo-program"><span>Build and Run a Cargo Program</span></a></h2><p>Using command <code>cargo build</code> and that will compile and generate executable files.</p><p>The executable files will be stored in <code>./target/debug/</code>, we can simply use <code>./target/debug/hello_world</code> to execute these files.</p><p>Or we can simply use <code>cargo run</code>, which will compile and run the program automatically.</p><h2 id="tl-dr" tabindex="-1"><a class="header-anchor" href="#tl-dr"><span>tl;dr</span></a></h2><ul><li>We can create a project using <code>cargo new</code>.</li><li>We can build a project using <code>cargo build</code>.</li><li>We can build and run a project in one step using <code>cargo run</code>.</li><li>We can build a project without producing a binary to check for errors using <code>cargo check</code>.</li><li>Instead of saving the result of the build in the same directory as our code, Cargo stores it in the <em>target/debug</em> directory.</li></ul><h1 id="import-library" tabindex="-1"><a class="header-anchor" href="#import-library"><span>Import library</span></a></h1><p><code>use std::io;</code></p><h1 id="variables" tabindex="-1"><a class="header-anchor" href="#variables"><span>Variables</span></a></h1><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> guess <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// mutable</span>
<span class="token keyword">let</span> apples <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>					<span class="token comment">// immutable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>mut</code> indicates that the value of the variable is mutable.</p><h1 id="receive-user-input" tabindex="-1"><a class="header-anchor" href="#receive-user-input"><span>Receive User Input</span></a></h1><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> guess<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Fail to read lines&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// This is called when error comes out</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="print-variables-in-println" tabindex="-1"><a class="header-anchor" href="#print-variables-in-println"><span>Print variables in <code>println!</code></span></a></h1><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;x = {x} and y + 2 = {}&quot;</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="crate" tabindex="-1"><a class="header-anchor" href="#crate"><span>Crate</span></a></h1><p>This refers to library or module in other languages.</p><h2 id="import-crates" tabindex="-1"><a class="header-anchor" href="#import-crates"><span>Import crates</span></a></h2><p>Edit the <code>Cargo.toml</code> file and add <code>dependencies</code></p><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;guess_game&quot;</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1.0&quot;</span>
<span class="token key property">edition</span> <span class="token punctuation">=</span> <span class="token string">&quot;2021&quot;</span>

<span class="token comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span>

<span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.8.5&quot;</span>	 <span class="token comment"># This is a crate</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="update-crates" tabindex="-1"><a class="header-anchor" href="#update-crates"><span>update crates</span></a></h2><p>Use command <code>cargo update</code> to upgrade crates</p><h1 id="generate-a-random-number" tabindex="-1"><a class="header-anchor" href="#generate-a-random-number"><span>Generate a Random Number</span></a></h1><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Guess the number!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> secret_number <span class="token operator">=</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token function">thread_rng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gen_range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 1..=100 is a range that starts at 1 and ends at 100 (inclusive).</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The secret number is: {secret_number}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Please input your guess.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> guess <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> guess<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read line&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;You guessed: {guess}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="compare" tabindex="-1"><a class="header-anchor" href="#compare"><span>Compare</span></a></h1><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">rand<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token class-name">Ordering</span><span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// ...snip...</span>
    
    <span class="token keyword">let</span> guess<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> guess<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Please type a number!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>secret_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Less</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Too small!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Greater</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Too big!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Equal</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;You win!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This place uses <code>match</code> expression to decide what to do next based on which variant of <code>Ordering</code> was returned from <code>cmp</code>.</p><p>The statement <code>let guess: u32 </code> indicates that the type of variable <code>guess</code> should be <code>u32</code>.</p><h1 id="use-loop-while-guessing-numbers" tabindex="-1"><a class="header-anchor" href="#use-loop-while-guessing-numbers"><span>Use loop while guessing numbers</span></a></h1><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">loop</span> <span class="token punctuation">{</span>
    	<span class="token comment">// snip</span>
    	
        <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">cmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>secret_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Less</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Too small!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Greater</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Too big!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Ordering</span><span class="token punctuation">::</span><span class="token class-name">Equal</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;You win!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="handle-invalid-input" tabindex="-1"><a class="header-anchor" href="#handle-invalid-input"><span>Handle Invalid Input</span></a></h1><p>We may encounter invalid input error when converting string to int.</p><div class="language-rust line-numbers-mode" data-ext="rs" data-title="rs"><pre class="language-rust"><code><span class="token keyword">let</span> guess<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token keyword">match</span> guess<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num<span class="token punctuation">,</span>
    <span class="token class-name">Err</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">continue</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead of using <code>expert</code>, we use <code>match</code> expression here to deal with invalid inputs.</p>`,44);function k(m,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[s("Watch this tutorial: "),n("a",r,[s("https://doc.rust-lang.org/book/ch01-01-installation.html"),c(a)])]),d])}const g=e(l,[["render",k],["__file","Day1_Rust_Learning.html.vue"]]);export{g as default};
